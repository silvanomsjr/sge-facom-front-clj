{"version":3,"sources":["main/utils/main.cljs"],"mappings":";AAIA,0BAAA,1BAAKA;AAEL,uCAAA,vCAAMC,sFAAmBC;AAAzB,AAIM,OAAA,WAAAE;AAAA,AAAE,oDAAAA,8DAAO,AAACC,8CAAMC,cAAI,+HAAA,/HAACC,+CAAO,2EAAA,3EAACC,cAAI,CAAA,MAAK,gDAAA,hDAACA,cAAI,gBAAAJ,hBAACK;iDAH5CP,vBACA,yBAAA,IAAA,7BAACC,vBACD,yDAAA,IAAA,7DAACA;;AAGP,+BAAA,/BAAMO,sEAAcC;AAApB,AACE,IAAMC,cAAY,+BAAA,qCAAA,oEAAID,nDACA,yDAAA,zDAACE,jBACDC,rCACAb,/BACAc;AAJtB,iEAKM,AAAQC,WAAQJ,5EAChB,2IAAA,2EAAA,/MAACK","names":["main.utils.main/API_URL","main.utils.main/base64url->base64","s","clojure.string/replace","p1__13084#","cljs.core.apply","cljs.core/str","cljs.core.repeat","cljs.core/mod","cljs.core/count","main.utils.main/decode-token","token","payload-str","clojure.string.split","cljs.core/second","goog.crypt.base64/decodeString","js/JSON","cljs.core.js__GT_clj"],"sourcesContent":["(ns main.utils.main\n  (:require [goog.crypt.base64 :as b64]\n            [clojure.string :as string]))\n\n(def API_URL \"http://3.138.123.158\")\n\n(defn base64url->base64 [s]\n  (-> s\n      (string/replace \"-\" \"+\")\n      (string/replace \"_\" \"/\")\n      (#(str % (apply str (repeat (mod (- 4 (mod (count %) 4)) 4) \"=\"))))))\n\n(defn decode-token [token]\n  (let [payload-str (-> token\n                        (string/split #\"\\.\")\n                        second\n                        base64url->base64\n                        b64/decodeString)]\n    (-> (.parse js/JSON payload-str)\n        (js->clj :keywordize-keys true))))\n"]}