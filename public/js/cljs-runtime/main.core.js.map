{"version":3,"sources":["main/core.cljs"],"mappings":";;AAWA,GAAA,QAAAA,iCAAAC,sCAAAC;AAAA;AAAA,AAAA,AAASC,yBAAa,gDAAA,hDAACC;;AACvB,GAAA,QAAAJ,iCAAAC,sCAAAI;AAAA;AAAA,AAAA,AAASC,iBAAK,AAACC,gDAAW,wBAAA,xBAAiBC;;AAE3C,sBAAA,tBAAMC;AAAN,AAAA,0FAAA,mDAAA,mFAAA,kDAAA;;AAGA,mBAAA,mFAAA,mFAAA,IAAA,2CAAA,qDAAA,oDAAA,+FAAA,mFAAA,SAAA,2CAAA,qDAAA,qDAAA,iGAAA,mFAAA,YAAA,2CAAA,qDAAA,6DAAA,9/BAAKC,sYAC2BC,gVACCC,6VACMC;AAEvC,AAAKC,mBAAO,AAACC,qDAAUL;AAEvB,sBAAA,tBAAMM;AAAN,AACE,IAAMC,QAAM,qBAAA,rBAAUC;AAAtB,AACE,oBAAID;AAAJ;;AAAA;;;AAIJ,wBAAA,xBAAME,wDAAaC;AAAnB,AACE,IAAMC,gBAAQ,AAACL;IACTM,OAAK,yDAAA,mFAAA,qDAAA,jMAACC,+CAAOH;AADnB,AAEE,GACE,EAAK,GAAKC,qBAAS,AAACG,cAAK,iBAAAC,eAAA,iFAAA,0DAAA;AAAA,AAAA,QAAAA,6CAAAA,mDAAAA,RAAqBH,+BAAAA;;AAC9C,wEAAA,jEAACI;;AAFH,GAGE,EAAKL,mBAAQ,kDAAA,lDAACM,6CAAEL;AAChB,wEAAA,jEAACI;;AAJH,AAME,OAACE,sBAAOzB,uBAAa,AAAA,mFAAO,AAAA,mFAAOiB;;;;;AAEzC,gBAAA,hBAAMS;AAAN,AACE;AAAA,AAAA,0FAAA,mDAEG,yBAAA,AAAA,yHAAA,hJAAM,AAACb,0GACJc,4CACH,kBAAA,AAAAC,yCAAA,mFAAA,AAAAA,gDAAA,5JAAK5B,4HACDA,mHACDM;;;AAER,iBAAA,jBAAMuB;AAAN,AACE,wEAAA,2CAAA,sEAAA,zLAACC,iCACAnB,iBACAK;;AAED,OAASb,sBAAK,sDAAA,tDAAC4B,yIAAcL;;AAE/B,yBAAA,zBAAuBM;AAAvB,AACE,OAACH","names":["js/main","js/main.core","js/main.core.current-page","main.core/current-page","reagent.core.atom","js/main.core.root","main.core/root","js/module$node_modules$react_dom$client.createRoot","js/document","main.core/not-found","main.core/routes","main.pages.home.view/home","main.pages.login.view/login","main.pages.cadastro.view/cadastro","main.core/router","reitit.frontend.router","main.core/logged-in","token","js/localStorage","main.core/on-navigate","new-match","logged?","page","cljs.core.get_in","cljs.core/not","fexpr__12823","reitit.frontend.easy.replace_state","cljs.core._EQ_","cljs.core/reset!","main.core/app","main.components.header/header","cljs.core/deref","main.core/init","reitit.frontend.easy/start!","reagent.core.as_element","main.core/reload!"],"sourcesContent":["(ns main.core\n  (:require\n   [\"react-dom/client\" :refer [createRoot]]\n   [reagent.core :as r]\n   [reitit.frontend :as rf]\n   [reitit.frontend.easy :as rfe]\n   [main.components.header :refer [header]]\n   [main.pages.home.view :refer [home]]\n   [main.pages.login.view :refer [login]]\n   [main.pages.cadastro.view :refer [cadastro]]))\n\n(defonce current-page (r/atom nil))\n(defonce root (createRoot (.getElementById js/document \"app\")))\n\n(defn not-found []\n  [:div [:h1 \"nada encontrado\"]])\n\n(def routes\n  [[\"/\"      {:name :home :view home}]\n   [\"/login\" {:name :login :view login}]\n   [\"/cadastro\" {:name :cadastro :view cadastro}]])\n\n(def router (rf/router routes))\n\n(defn logged-in []\n  (let [token (.getItem js/localStorage \"token\")]\n    (if token\n      true\n      false)))\n\n(defn on-navigate [new-match]\n  (let [logged? (logged-in)\n        page (get-in new-match [:data :name])]\n    (cond\n      (and (not logged?) (not  (#{:login :cadastro} page)))\n      (rfe/replace-state :login)\n      (and logged? (= page :login))\n      (rfe/replace-state :home)\n      :else\n      (reset! current-page (:view (:data new-match))))))\n\n(defn app []\n  (fn []\n    [:div\n     (when (logged-in)\n       [header])\n     (if @current-page\n       [@current-page]\n       [not-found])]))\n\n(defn init []\n  (rfe/start!\n   router\n   on-navigate\n   {:use-fragment false})\n  (.render root (r/as-element [app])))\n\n(defn ^:dev/after-load reload! []\n  (init))\n"]}