{"version":3,"sources":["main/pages/login/view.cljs"],"mappings":";AAOA,GAAA,QAAAA,iCAAAC,uCAAAC,6CAAAC,kDAAAC;AAAA;AAAA,AAAA,AAASC,gCAAQ,gDAAA,hDAACC;;AAElB,GAAA,QAAAN,iCAAAC,uCAAAC,6CAAAC,kDAAAI;AAAA;AAAA,AAAA,AAASC,8BAAM,gDAAA,hDAACF;;AAEhB,GAAA,QAAAN,iCAAAC,uCAAAC,6CAAAC,kDAAAM;AAAA;AAAA,AAAA,AAASC,qCAAa,gDAAA,hDAACJ;;AAEvB,mCAAA,nCAAMK,8EAAYC,WAAWC;AAA7B,AACE,yGAAA,zGAACC,sHAAqB,4CAAK,AAACC,eAAkB,qBAAA,2CAAA,uDAAA,AAAAC,+CAAA,4DAAA,AAAAA,lOAACC,uIAAiBZ,2GAAmBG;;AACnF,2DAAA,sFAAA,2CAAA,8VAAA,2DAAA,2CAAA,eAAA,2BAAA,sEAAA,gFAAA,2EAAA,qDAAA,8DAAA,v/BAACU,2OACQ,AAAYC,eAAQ,qBAAA,2CAAA,uDAAA,AAAAH,+CAAA,4DAAA,AAAAA,lOAACC,uIAAiBZ,2GAAmBG,kPAEtDI,kFACMC;;AAIpB,qCAAA,rCAAMO;AAAN,AACE,IAAMC,SAAO,iBAAAC,WAAA;IAAAA,eAAA,4SAAAA,1SACE,4BAAA,AAAAN,5BAACO,4CAAYlB,iCAAS,6CAAAiB,SAAA,2CAAA,uDAAA,xJAACE;AADzB,AAAA,GAEE,4BAAA,AAAAR,5BAACO,4CAAYf;AAAO,oDAAAc,aAAA,2CAAA,uDAAA,5JAACE;;AAFvBF;;;AAAb,AAGE,GAAI,AAACG,cAAIJ;AACP,OAACK,sBAAOhB,mCAAaW;;AACrB,OAACV,iCACA,WAAAgB;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAaG;AAAb,AACE,oBAAIA;AACF,AACE,qBAAA,rBAAUC,6BAAwBD;;AAClC,wEAAA,jEAACE;;AACH,gEAAA,mFAAA,2CAAA,uDAAA,9OAACP,sBAAOhB;;GACZ,WAAKwB;AAAL,AACE,yGAAA,zGAACpB,2HAA0BoB;;AAC3B,gEAAA,mFAAA,2CAAA,uDAAA,9OAACR,sBAAOhB;;;;AAEjB,6BAAA,7BAAMyB;AAAN,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,iDAAA,mFAAA,mDAAA,2CAAA,oDAAA,6BAAA,uDAAA,2CAAA,uDAAA,+BAAA,mFAAA,qDAAA,2CAAA,wDAAA,4CAAA;;AAUA,8BAAA,9BAAMG;AAAN,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,2DAAA,mFAAA,mDAAA,2CAAA,wDAAA,yFAAA,mFAAA,mDAAA,2CAAA,wDAAA,iBAAA,8HAAA,mFAAA,sDAAA,2CAAA,mEAAA,eAAA,wDAAA,6HAAA,qDAAA,OAAA,+DAAA,WAAAF,5mBAOMD;AAPN,AAYkB,OAACT,sBAAOrB,8BAAQ,AAAA,AAAA+B;GAZlC,sDAAA,AAAApB,+CAAA,6DAAA,qBAAA,mFAAA,sDAAA,2CAAA,mEAAA,QAAA,wDAAA,6HAAA,qDAAA,WAAA,sDAAA,AAAAA,6CAAA,+DAAA,WAAAqB,lxBAachC,2qBAMAG;AAnBd,AAoBkB,OAACkB,sBAAOlB,4BAAM,AAAA,AAAA6B;GApBhC,6DAAA,qBAAA,mFAAA,yDAAA,2CAAA,gGAAA,wDAAA,2HAAA,iBAAA,mFAAA,gDAAA,2CAAA,mLAAA,xkBAuBgBjB,0cAGD,wDAAA,xDAACmB","names":["js/main","js/main.pages","js/main.pages.login","js/main.pages.login.view","js/main.pages.login.view.usuario","main.pages.login.view/usuario","reagent.core.atom","js/main.pages.login.view.senha","main.pages.login.view/senha","js/main.pages.login.view.login_errors","main.pages.login.view/login_errors","main.pages.login.view/req-to-api","on_success","on_error","cljs.core.println","js/JSON.stringify","cljs.core/deref","cljs.core/clj->js","ajax.core.POST","js/JSON","main.pages.login.view/efetua-login","errors","G__12855","clojure.string/blank?","cljs.core.conj","cljs.core/seq","cljs.core/reset!","p__12856","map__12857","cljs.core/--destructure-map","cljs.core.get","token","js/localStorage","reitit.frontend.easy.replace_state","error","main.pages.login.view/logo","p1__12858#","p1__12859#","main.pages.login.view/login","reitit.frontend.easy.href"],"sourcesContent":["(ns main.pages.login.view\n  (:require\n   [clojure.string :as str]\n   [reitit.frontend.easy :as rfe]\n   [reagent.core :as r]\n   [ajax.core :refer [POST]]))\n\n(defonce usuario (r/atom \"\"))\n\n(defonce senha (r/atom \"\"))\n\n(defonce login_errors (r/atom []))\n\n(defn req-to-api [on_success on_error]\n  (println \"Que isso: \" (str (js/JSON.stringify (clj->js {:email @usuario :password @senha}))))\n  (POST \"http://localhost:3000/users/login\"\n    {:body (.stringify js/JSON (clj->js {:email @usuario :password @senha}))\n     :headers {\"Content-Type\" \"application/json\"}\n     :handler on_success\n     :error-handler on_error\n     :response-format :json\n     :keywords? true}))\n\n(defn efetua-login []\n  (let [errors (cond-> []\n                 (str/blank? @usuario) (conj {:error :usuario})\n                 (str/blank? @senha) (conj {:error :senha}))]\n    (if (seq errors)\n      (reset! login_errors errors)\n      (req-to-api\n       (fn [{:keys [token]}]\n         (if token\n           (do\n             (.setItem js/localStorage \"token\" token)\n             (rfe/replace-state :home))\n           (reset! login_errors [{:error :login-failed}])))\n       (fn [error]\n         (println \"Erro no login: \" error)\n         (reset! login_errors [{:error :login-failed}]))))))\n\n(defn logo []\n  [:div\n   {:class \"flex justify-center items-center gap-2\"}\n   [:img\n    {:src \"/images/ufu_logo_small.png\"\n     :style {:width \"35px\"}}]\n   [:span\n    {:class \"font-bold text-2xl text-[#1c2256]\"}\n    \"SGE FACOM\"]])\n\n(defn login []\n  [:div\n   {:class \"w-full h-screen flex justify-center items-center\"}\n   [:div\n    {:class \"w-[40%] p-8 flex flex-col shadow-2xl rounded-sm border-gray-200 border-1 gap-2\"}\n    [:div\n     {:class \"w-full\"}\n     [logo]]\n    [:input\n     {:placeholder \"Usu\u00e1rio\"\n      :class \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n      :type \"text\"\n      :on-change #(reset! usuario (-> % .-target .-value))\n      :value @usuario\n      :required true}]\n    [:input\n     {:placeholder \"Senha\"\n      :class \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n      :type \"password\"\n      :value @senha\n      :on-change #(reset! senha (-> % .-target .-value))\n      :required true}]\n    [:button\n     {:on-click efetua-login\n      :class \"w-full px-3 py-2 bg-[#1c2256] text-white cursor-pointer rounded hover:brightness-140 transition-all duration-200\"}\n     \"Entrar\"]\n    [:a {:href (rfe/href :cadastro)} \"Cadastro\"]]])\n"]}